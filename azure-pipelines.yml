variables:
  JAVA_HOME: '/usr/lib/jvm/java-17-openjdk-17.0.14.0.7-2.el9.x86_64'

trigger:
  branches:
    include:
    - main

pr:
  branches:
    include:
    - main

pool:
  name: Default

stages:
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    displayName: "Build Application"
    steps:
    - checkout: self

    - script: |
        export JAVA_HOME=$JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        java -version
      displayName: "Set JAVA_HOME and Verify Java Version"

    - script: |
        if [ -f "pom.xml" ]; then
          mvn dependency:resolve
        else
          echo "Skipping dependency resolution as pom.xml is missing."
        fi
      displayName: "Restore Dependencies"

    - script: |
        if [ -f "pom.xml" ]; then
          mvn clean package
        else
          echo "Skipping build as pom.xml is missing."
        fi
      displayName: "Build the Application"

    - script: |
        if ls target/*.war 1> /dev/null 2>&1; then
          echo "WAR file found. Proceeding to upload."
        else
          echo "ERROR: No WAR file found in target/ directory."
          exit 1
        fi
      displayName: "Verify WAR File Exists"

    - task: PublishPipelineArtifact@1
      condition: succeeded()
      inputs:
        targetPath: '$(Build.SourcesDirectory)/target/'
        artifact: 'build-artifacts'
      displayName: "Publish Build Artifacts"

- stage: Test
  displayName: "Test Stage"
  jobs:
  - job: Test
    displayName: "Run Tests"
    steps:
    - checkout: self

    - script: |
        export JAVA_HOME=$JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        java -version
      displayName: "Set JAVA_HOME and Verify Java Version"

    - script: mvn clean test
      displayName: "Run JUnit Tests"

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/target/surefire-reports/'
        artifact: 'test-results'
      displayName: "Publish Test Results"

- stage: CodeCoverage
  displayName: "Code Coverage Stage"
  jobs:
  - job: CodeCoverage
    displayName: "Run Code Coverage"
    steps:
    - checkout: self

    - script: |
        export JAVA_HOME=$JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        java -version
      displayName: "Set JAVA_HOME and Verify Java Version"

    - script: mvn clean verify jacoco:report
      displayName: "Run Code Coverage with JaCoCo"

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/target/site/jacoco/jacoco.xml'
        artifact: 'code-coverage'
      displayName: "Publish Code Coverage Report"

- stage: UploadToArtifactory
  displayName: "Upload to JFrog Artifactory"
  dependsOn:
  - Build
  - Test
  - CodeCoverage
  jobs:
  - job: Upload
    displayName: "Upload Build Artifacts to JFrog"
    pool:
      name: Default # Ensure this matches your self-hosted agent pool
    steps:
    - checkout: self

    - script: |
        echo "Authenticating with JFrog Artifactory"
        jfrog rt ping || echo "JFrog CLI is not working properly"
      env:
        JFROG_ACCESS_TOKEN: $(JFROG_ACCESS_TOKEN)
      displayName: "Authenticate with JFrog"

    - script: |
        jfrog rt u "target/maven_mvc.war" \
        "maven_mvc.war" \
        --url=$(ARTIFACTORY_URL) \
        --access-token=$(JFROG_ACCESS_TOKEN)

- stage: SonarQubeAnalysis
  displayName: "SonarQube Analysis"
  dependsOn:
  - Build
  - Test
  - CodeCoverage
  jobs:
  - job: SonarQube
    displayName: "Run SonarCloud Scan"
    steps:
    - checkout: self

    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: 'code-coverage'
        path: '$(Pipeline.Workspace)/code-coverage'
      displayName: "Download Code Coverage Report"

    - script: ls -l $(Pipeline.Workspace)/code-coverage || echo "Coverage report not found"
      displayName: "Verify Coverage Report Exists"

    - script: mvn dependency:copy-dependencies -DoutputDirectory=target/dependency
      displayName: "Download Dependencies"

    - script: |
        mvn sonar:sonar \
          -Dsonar.projectKey=Piyush-ngro_task1 \
          -Dsonar.organization=piyush-ngro-1 \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$(SONAR_TOKEN) \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.libraries=target/dependency/* \
          -Dsonar.coverage.jacoco.xmlReportPaths=$(Pipeline.Workspace)/code-coverage/jacoco.xml
      env:
        SONAR_TOKEN: $(SONAR_TOKEN)
      displayName: "Run SonarCloud Scan"

- stage: Notify
  displayName: "Failure Notification"
  condition: failed()
  jobs:
  - job: Notify
    displayName: "Send Failure Notification"
    steps:
    - script: |
        echo "Subject: ðŸš¨ Build Failed: $(Build.Repository.Name)" > email.txt
        echo "The latest build of $(Build.Repository.Name) has failed. Please check the logs." >> email.txt
        cat email.txt | sendmail -S $(SMTP_SERVER) -p $(SMTP_PORT) -au$(SMTP_USERNAME) -ap$(SMTP_PASSWORD) $(NOTIFICATION_EMAIL)
      env:
        SMTP_SERVER: $(SMTP_SERVER)
        SMTP_PORT: $(SMTP_PORT)
        SMTP_USERNAME: $(SMTP_USERNAME)
        SMTP_PASSWORD: $(SMTP_PASSWORD)
        NOTIFICATION_EMAIL: $(NOTIFICATION_EMAIL)
      displayName: "Send Email Notification"
