name: Advanced CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  JAVA_HOME: '/usr/lib/jvm/java-17-openjdk-17.0.14.0.7-2.el9.x86_64'
  PATH: '/usr/lib/jvm/java-17-openjdk-17.0.14.0.7-2.el9.x86_64/bin:/usr/bin:$PATH'

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify Java installation
      run: |
        echo "JAVA_HOME is set to: $JAVA_HOME"
        echo "Path: $PATH"
        java -version
        mvn -version

    - name: Restore dependencies
      if: hashFiles('pom.xml') != ''
      run: mvn dependency:resolve

    - name: Build the application
      if: hashFiles('pom.xml') != ''
      run: mvn clean package

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.ref_name }}-${{ github.sha }}
        path: target/*.war

  test:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run JUnit Tests
      run: mvn clean test

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.ref_name }}-${{ github.sha }}
        path: target/surefire-reports/
        if-no-files-found: warn

  code_coverage:
    runs-on: self-hosted
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Code Coverage with JaCoCo
      run: mvn clean verify jacoco:report

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-${{ github.ref_name }}-${{ github.sha }}
        path: '**/target/site/jacoco/jacoco.xml'

  upload-artifacts-to-artifactory:
    needs: [ build, test, code_coverage ]
    runs-on: self-hosted

    env:
      JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: JFrog Artifactory Setup
      uses: jfrog/setup-jfrog-cli@v4

    - name: Upload Artifact to JFrog Artifactory
      run: |
        jfrog rt u "target/maven_mvc.war" \
        "github-actions-libs-snapshot-local/${{ github.run_id }}/maven_mvc.war" \
        --url=${{ secrets.ARTIFACTORY_URL }} \
        --access-token=${{ secrets.JFROG_ACCESS_TOKEN }} \
        --build-name=${{ github.run_id }} \
        --build-number=${{ github.run_number }}
  notify:
    runs-on: self-hosted
    needs: [ build, test, code_coverage, upload-artifacts-to-artifactory ]
    if: failure()

    steps:
    - name: Send Failure Notification via Email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "ðŸš¨ Build Failed: ${{ github.repository }}"
        body: "The latest build of ${{ github.repository }} has failed. Please check the logs in GitHub Actions."
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions Bot"

  sonarcloud_scan:
    runs-on: self-hosted
    needs: [ build, test, code_coverage ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Download the JaCoCo coverage report artifact
    - name: Download Coverage Report
      uses: actions/download-artifact@v4
      with:
        name: code-coverage-${{ github.ref_name }}-${{ github.sha }}
        path: target/site/jacoco/

    # Verify that the coverage report exists
    - name: Verify Coverage Report Exists
      run: ls -l target/site/jacoco || echo "Coverage report not found"

    # Download project dependencies to ensure SonarCloud has all required libraries
    - name: Download Dependencies
      run: mvn dependency:copy-dependencies -DoutputDirectory=target/dependency

    # Run SonarCloud analysis
    - name: Run SonarCloud Analysis with Maven
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=Piyush-ngro_task1 \
          -Dsonar.organization=piyush-ngro-1 \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
