name: Advanced CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - develop
    - feature-*
  pull_request:
    branches:
    - main
    - develop
  schedule:
  - cron: "30 11 * * 3,5"

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      if: hashFiles('pom.xml') != ''
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Restore dependencies (Java)
      if: hashFiles('pom.xml') != ''
      run: mvn dependency:resolve

    - name: Build the application (Java)
      if: hashFiles('pom.xml') != ''
      run: mvn clean package

    - name: Upload Build Artifacts with Versioning
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.ref_name }}-${{ github.sha }}
        path: |
          **/target/*.war

  test:
    runs-on: self-hosted
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore dependencies (Java)
      if: hashFiles('pom.xml') != ''
      run: mvn dependency:resolve

    - name: Run JUnit Tests (Java)
      if: hashFiles('pom.xml') != ''
      run: mvn test
      continue-on-error: true

    - name: Generate test report
      run: mvn surefire-report:report
      continue-on-error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.ref_name }}-${{ github.sha }}
        path: target/surefire-reports/
        if-no-files-found: warn

    - name: Run Code Coverage (JaCoCo)
      if: hashFiles('pom.xml') != ''
      run: mvn org.jacoco:jacoco-maven-plugin:0.8.10:prepare-agent test org.jacoco:jacoco-maven-plugin:0.8.10:report

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-${{ github.ref_name }}-${{ github.sha }}
        path: |
          **/coverage/
          **/target/site/jacoco/

  # deploy:
  #   runs-on: self-hosted
  #   needs: test
  #   if: success()

  #   steps:
  #     - name: Deploy Application
  #       run: echo "Deploying application..."

  upload-artifacts-to-artifactory:
    runs-on: self-hosted
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # - name: Download build artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: build-artifacts-${{ github.ref_name }}-${{ github.sha }}
    #     path: artifacts/

    - name: Set JFrog Environment Variable
      run: echo "JF_ENV_1=${{ secrets.JFROG_ACCESS_TOKEN }}" >> $GITHUB_ENV

    - name: Setup JFrog
      uses: jfrog/setup-jfrog-cli@v4

    - name: Test JFrog Connection
      run: |
        # Ping the server
        jf rt ping

    - name: JFrog Artifactory Publish
      run: |
        jf rt u "**/*.war" ${{ secrets.JF_ARTIFACTORY_REPO }}/$(date +%Y-%m-%d_%H-%M-%S)/ \
          --build-name=${{ github.run_id }} \
          --build-number=${{ github.run_number }}

  notify:
    runs-on: self-hosted
    needs: [ build, test, upload-artifacts-to-artifactory ]
    if: failure()

    steps:
    - name: Send Failure Notification via Email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "ðŸš¨ Build Failed: ${{ github.repository }}"
        body: "The latest build of ${{ github.repository }} has failed. Please check the logs in GitHub Actions."
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions Bot"

  sonarcloud:
    name: Build and analyze
    runs-on: self-hosted
    needs: test # Ensure tests pass before SonarCloud analysis

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for better relevancy of analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_ORG: ${{ secrets.SONAR_ORG }}
      run: |
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.organization=$SONAR_ORG \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN
          -Dsonar.qualitygate.wait=true  # Fails the build if SonarCloud detects issues
