name: Advanced CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore dependencies
      if: hashFiles('pom.xml') != ''
      run: mvn dependency:resolve

    - name: Build the application
      if: hashFiles('pom.xml') != ''
      run: mvn clean package

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.ref_name }}-${{ github.sha }}
        path: target/*.war

  test:
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run JUnit Tests
      run: mvn clean test

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.ref_name }}-${{ github.sha }}
        path: target/surefire-reports/
        if-no-files-found: warn

  code_coverage:
    runs-on: self-hosted
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Code Coverage with JaCoCo
      run: mvn clean verify jacoco:report

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-${{ github.ref_name }}-${{ github.sha }}
        path: '**/target/site/jacoco/jacoco.xml'

  upload-artifacts-to-artifactory:
    needs: [ build, test, code_coverage ]
    runs-on: self-hosted

    env:
      JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

    steps:
    - name: JFrog Artifactory Setup
      uses: jfrog/setup-jfrog-cli@v4

    - name: JFrog Artifactory Publish
      run: |
        jfrog rt u "target/*.war" ${{ secrets.ARTIFACTORY_URL }} --build-name=${{ github.run_id }} --build-number=${{ github.run_number }}
  # notify:
  #   runs-on: self-hosted
  #   needs: [ build, test, code_coverage, upload-artifacts-to-artifactory ]
  #   if: failure()

  #   steps:
  #   - name: Send Failure Notification via Email
  #     uses: dawidd6/action-send-mail@v3
  #     with:
  #       server_address: ${{ secrets.SMTP_SERVER }}
  #       server_port: ${{ secrets.SMTP_PORT }}
  #       username: ${{ secrets.SMTP_USERNAME }}
  #       password: ${{ secrets.SMTP_PASSWORD }}
  #       subject: "ðŸš¨ Build Failed: ${{ github.repository }}"
  #       body: "The latest build of ${{ github.repository }} has failed. Please check the logs in GitHub Actions."
  #       to: ${{ secrets.NOTIFICATION_EMAIL }}
  #       from: "GitHub Actions Bot"
